name: CI
# Updated to fix Python version matrix issue

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_retirement_planner
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install boto3  # For S3 storage tests

    - name: Set up environment variables
      run: |
        echo "DB_URL=postgresql://postgres:postgres@localhost:5432/test_retirement_planner" >> $GITHUB_ENV
        echo "REDIS_URL=redis://redis:6379/0" >> $GITHUB_ENV
        echo "FLASK_ENV=testing" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
        echo "APP_ENV=testing" >> $GITHUB_ENV

    - name: Run database migrations
      run: |
        alembic upgrade head

    - name: Run tests
      run: |
        make test

    - name: Run linting
      run: |
        make lint

    - name: Run type checking
      run: |
        make typecheck

    - name: Run coverage
      run: |
        make coverage

    - name: Upload coverage reports to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install boto3 bandit safety

    - name: Run security checks with bandit
      run: |
        bandit -r app/ -f json -o bandit-report.json
        bandit -r app/ -ll

    - name: Run safety check
      env:
        SAFETY_DISABLE_TELEMETRY: "1"
      run: |
        safety check || echo "Safety check completed with issues"

  docker:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t retirement-planner:test .

    - name: Test Docker container
      run: |
        docker run --rm \
          -e SECRET_KEY=test-secret-key \
          -e FLASK_ENV=testing \
          -e DB_URL=sqlite:///test.db \
          retirement-planner:test pytest -v tests/test_health.py tests/test_storage_service.py
# Trigger new CI run
